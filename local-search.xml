<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++算法笔记02:2分查找</title>
    <link href="/2024/07/14/C-%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B002-2%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2024/07/14/C-%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B002-2%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="二分查找-Binary-Search"><a href="#二分查找-Binary-Search" class="headerlink" title="二分查找 (Binary Search)"></a>二分查找 (Binary Search)</h2><p><strong>基本逻辑步骤</strong>：</p><ol><li>初始化左右边界：<code>left</code> 为数组的起始位置，<code>right</code> 为数组的结束位置。</li><li>计算中间位置：<code>mid = (left + right)/2</code>。</li><li>比较中间元素和目标元素：<ul><li>如果中间元素等于目标元素，则返回中间位置。</li><li>如果中间元素小于目标元素，则将左边界设为 <code>mid + 1</code>。</li><li>如果中间元素大于目标元素，则将右边界设为 <code>mid - 1</code>。</li></ul></li><li>重复步骤 2 和 3，直到 <code>mid</code> 等于目标元素或范围为空。</li><li><strong>时间复杂度</strong>: 仅有 <code>O(logn)</code></li></ol><p>**<u>使用binary search 的前提条件</u>**：数组必须有序</p><h4 id="lower-bound-x"><a href="#lower-bound-x" class="headerlink" title="lower_bound(x)"></a>lower_bound(x)</h4><p>lower_bound 返回数组中 <code>&gt;=x</code>的第一个数子的iterator</p><h4 id="upper-bound-x"><a href="#upper-bound-x" class="headerlink" title="upper_bound(x)"></a>upper_bound(x)</h4><p>lower_bound 返回数组中<code>&gt;x</code>的第一个数子的iterator</p><p><strong>下面用二分查找来实现两个函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lower_bound</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = n, ans = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>; <span class="hljs-comment">// /2</span><br>    <span class="hljs-keyword">if</span> (a[mid] &gt;= x) &#123;<br>      ans = mid;<br>      r = mid - <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">upper_bound</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = n, ans;<br>  <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (a[mid] &gt; x) &#123;<br>      ans = mid;<br>      r = mid - <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> a[ans];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++算法笔记01:排序</title>
    <link href="/2024/07/13/post/"/>
    <url>/2024/07/13/post/</url>
    
    <content type="html"><![CDATA[<p>C++ 中主要的排序算法有以下几种：</p><ol><li>selection sort 选择排序</li><li>bubble sort 冒泡排序</li><li>Insertion sort 插入排序</li><li>quick sort 快速排序 </li><li>merge sort 归并排序</li><li>bucket sort 桶排序</li></ol><h2 id="Selection-sort-选择排序实现"><a href="#Selection-sort-选择排序实现" class="headerlink" title="Selection sort 选择排序实现"></a>Selection sort 选择排序实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>  <span class="hljs-type">int</span> mn = <span class="hljs-number">1e9</span>, pos;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; j ++) &#123;<br>    <span class="hljs-keyword">if</span> (a[j] &lt; mn) &#123;<br>      mn = a[j];<br>      pos = j;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">swap</span>(a[i],a[pos]);<br>&#125;<br></code></pre></td></tr></table></figure><p>选择排序其排序逻辑如下：</p><ol><li>有一个待排序的数组 A。</li><li>从 A 中找出最小的元素。</li><li>将找到的最小元素与数组 A 中第一个元素交换位置（如果最小元素就是第一个元素，则自己与自己交换位置）。</li></ol><p>选择排序的时间复杂度为 $O(n^2)$</p><h2 id="Bubble-sort-冒泡排序实现"><a href="#Bubble-sort-冒泡排序实现" class="headerlink" title="Bubble sort 冒泡排序实现"></a>Bubble sort 冒泡排序实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j ++) &#123;<br>    <span class="hljs-keyword">if</span> (a[j] &gt; a[j<span class="hljs-number">+1</span>]) &#123;<br>      <span class="hljs-built_in">swap</span>(a[j],a[j<span class="hljs-number">+1</span>]);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每一轮 <code>i</code>的遍历后，数据中最大的值会被排好序，放置在正确的位置。</p><p>Bubble Sort 的效果是将最大值找到并放到队列最后。</p><p>其思想是通过局部有序，逐步将大的元素往后移动，聚焦在相邻的两个元素上。</p><p>冒泡排序的时间复杂度为 $O(n^2)$</p><h2 id="Insertion-sort-插入排序实现"><a href="#Insertion-sort-插入排序实现" class="headerlink" title="Insertion sort 插入排序实现"></a>Insertion sort 插入排序实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++) &#123; <span class="hljs-comment">// i 指向的是即将插入人的index</span><br>  <span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; <span class="hljs-comment">// 已排序部分最后一位</span><br>  <span class="hljs-type">int</span> t = a[i]; <span class="hljs-comment">// 保存即将插入的元素</span><br>  <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; a[j] &gt; t) &#123;<br>    a[j<span class="hljs-number">+1</span>] = a[j]; <span class="hljs-comment">// 向右移动元素</span><br>    j--;<br>  &#125;<br>  a[j<span class="hljs-number">+1</span>] = t; <br>&#125;<br></code></pre></td></tr></table></figure><p>举个例子：</p><p>初始数组：3 5 1 2 4</p><ol><li>第一步：[3] 5 1 2 4</li><li>第二步：[3, 5] 1 2 4</li><li>第三步：[1, 3, 5] 2 4</li><li>第四步：[1, 2, 3, 5] 4</li><li>第五步：[1, 2, 3, 4, 5]</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>算法笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
