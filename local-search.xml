<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++算法笔记01:排序</title>
    <link href="/2024/07/13/post/"/>
    <url>/2024/07/13/post/</url>
    
    <content type="html"><![CDATA[<p>C++ 中主要的排序算法有以下几种：</p><ol><li>selection sort 选择排序</li><li>bubble sort 冒泡排序</li><li>Insertion sort 插入排序</li><li>quick sort 快速排序 </li><li>merge sort 归并排序</li><li>bucket sort 桶排序</li></ol><h2 id="Selection-sort-选择排序实现"><a href="#Selection-sort-选择排序实现" class="headerlink" title="Selection sort 选择排序实现"></a>Selection sort 选择排序实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>  <span class="hljs-type">int</span> mn = <span class="hljs-number">1e9</span>, pos;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= n; j ++) &#123;<br>    <span class="hljs-keyword">if</span> (a[j] &lt; mn) &#123;<br>      mn = a[j];<br>      pos = j;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">swap</span>(a[i],a[pos]);<br>&#125;<br></code></pre></td></tr></table></figure><p>选择排序其排序逻辑如下：</p><ol><li>有一个待排序的数组 A。</li><li>从 A 中找出最小的元素。</li><li>将找到的最小元素与数组 A 中第一个元素交换位置（如果最小元素就是第一个元素，则自己与自己交换位置）。</li></ol><p>选择排序的时间复杂度为 $O(n^2)$</p><h2 id="Bubble-sort-冒泡排序实现"><a href="#Bubble-sort-冒泡排序实现" class="headerlink" title="Bubble sort 冒泡排序实现"></a>Bubble sort 冒泡排序实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j ++) &#123;<br>    <span class="hljs-keyword">if</span> (a[j] &gt; a[j<span class="hljs-number">+1</span>]) &#123;<br>      <span class="hljs-built_in">swap</span>(a[j],a[j<span class="hljs-number">+1</span>]);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每一轮 <code>i</code>的遍历后，数据中最大的值会被排好序，放置在正确的位置。</p><p>Bubble Sort 的效果是将最大值找到并放到队列最后。</p><p>其思想是通过局部有序，逐步将大的元素往后移动，聚焦在相邻的两个元素上。</p><p>冒泡排序的时间复杂度为 $O(n^2)$</p><h2 id="Insertion-sort-插入排序实现"><a href="#Insertion-sort-插入排序实现" class="headerlink" title="Insertion sort 插入排序实现"></a>Insertion sort 插入排序实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++) &#123; <span class="hljs-comment">// i 指向的是即将插入人的index</span><br>  <span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; <span class="hljs-comment">// 已排序部分最后一位</span><br>  <span class="hljs-type">int</span> t = a[i]; <span class="hljs-comment">// 保存即将插入的元素</span><br>  <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; a[j] &gt; t) &#123;<br>    a[j<span class="hljs-number">+1</span>] = a[j]; <span class="hljs-comment">// 向右移动元素</span><br>    j--;<br>  &#125;<br>  a[j<span class="hljs-number">+1</span>] = t; <br>&#125;<br></code></pre></td></tr></table></figure><p>举个例子：</p><p>初始数组：3 5 1 2 4</p><ol><li>第一步：[3] 5 1 2 4</li><li>第二步：[3, 5] 1 2 4</li><li>第三步：[1, 3, 5] 2 4</li><li>第四步：[1, 2, 3, 5] 4</li><li>第五步：[1, 2, 3, 4, 5]</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>算法笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/13/hello-world/"/>
    <url>/2024/07/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
